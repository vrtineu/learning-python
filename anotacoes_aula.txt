# ANOTAÇÕES

print() #Mostra no terminal o que tiver dentro dos ().
input() #É o comando utilizado para pedir algo ao usuário.

print('Em python pode se usar {} para passar o valor de uma variável usando .format'.format())

int = números inteiros (7, 4, 0, -1, 9854)
float = números reais (7.5, 6.3, -15.223)
bool = valores booleanos (True, False)
str = string ('Olá', '7.5', '')

type() #serve para mostrar o tipo do dado, se eh string, int, float ou booleano.
variável.isnumeric ou qualquer outro tipo de is serve para testar a varíavel retornando um valor booleano.

# OPERADORES ARITMÉTICOS

+ Adição 5 + 2 == 7
- Subtração 5 - 2 == 3
* Multiplicação 5 * 2 == 10
/ Divisão 5 / 2 == 2.5
** Potenciação 5 ** 2 == 25
// Divisão Inteira  5 // 2 == 2
% Resto da Divisão 5 % 2 == 1

# Exemplo raiz
Raiz Quadrada **(1/2)
Raiz Cúbica **(1/3)

# ORDEM DE PRECEDÊNCIA
1 ()
2 **
3 * / // %
4 + -

= Atribuição
== Igual

end = '' # Serve para não quebrar a linha qnd existem duas funções print por exemplo, deve estar dentro de uma função print.
\n \n # De forma semelhante, serve para quebrar linha dentro de uma função print.

import biblioteca # importa todas as funções da biblioteca
from biblioteca import algo # importa só uma funcionalidade da biblioteca

biblioteca math ja vem por padrão instalado em python

# Fatiamento de string

frase = 'Curso em Video Python'

print(frase[9:21:2]) # O primeiro número dentro dos colchetes indica o começo, no caso seria o V de Video, o do meio indica o final, sendo até o N de Python, e o último pede pra ele fatiar a string pulando de 2 em 2, com isso o resultado seria VdoPto.

# Análise de string

frase = 'Curso em Video Python'

print(len(frase)) # comprimento da frase
frase.count('o') # conta a quantidadem de 'o' que tem na frase.
frase.count('o',0,13) # contagem de 'o' ja com fatiamento.
frase.find('deo') #mostra a posição em que 'deo' começou.
frase.find('Android') # se pedir pra procurar uma palavra inexistente essa função irá retornar o valor -1.
'Curso' in frase # retorna True (eh um operador)

print(frase.upper().count('O')) #Em python existem diferenciação de letras maiúsculas e minúsculas, sendo assim, nesse exemplo jogamos a frase para maiúsculo e dps contamos a quantidade de 'o' existente dentro dela.

# Transformação de string

frase = 'Curso em Video Python'

frase.replace('Python','Android') # procura a palavra python na string e muda para android.
frase.upper() #Transforma a frase inteira em letras maiúsculas.
frase.lower() #Transforma toda a frase em letras minúsculas.
frase.capitalize() #Vai transformar a frase toda em minúsuculo e apenas a primeira letra da palavra para maiúsculo.
frase.title() #Transforma a primeira letra de cada palavra em maiúsculo.

frase = '   Aprenda Python  '

frase.strip() #Remove todos os espaços inúteis contidos na string, permanecendo apenas os importantes que separam uma palavra da outra.
frase.rstrip() #Remove apenas os espaços a direita, como indica o r de right.
frase.lstrip() #Remove apenas os espaços da esquerda da frase, como indica o l de left.

# Divisão

frase = 'Curso em Video Python'

frase.split() #Divide a string em uma lista a partir de seus espaços e recebe indexação nova.
'-'.join(frase) #junta a frase usando '-' como espaçador.

print("""É utilizado quando for necessário colocar um texto longo.""")


# ESTRUTURAS CONDICIONAIS

Estrutura sequêncial

carro.siga()
carro.esquerda()
carro.siga()
carro.direita()
carro.siga()
carro.direita()
carro.siga()

Conjunto de passos = algoritmo

# Condição

if carro.esquerda:
    bloco True
else:
    bloco False

----------------------------------

tempo = int(input('Quantos anos tem seu carro? '))
if tempo <= 3:
    print('Carro novo')
else:
    print('Carro velho')
print('Fim')

# Condição Simplificada

tempo = int(input('Quantos anos tem seu carro? '))
print('carro novo' if tempo <= 3 else 'carro velho')
print('Fim')

ANSI - escapesequence

\033[style; text; background m
\033[0; 33; 44m

style: 0(none), 1(bold), 4(underline), 7(negative)
text: 30(white), 31(red), 32(green), 33(yellow), 34(blue), 35(purple), 36(cyan), 37(grey)
back: 40(white), 41(red), 42(green), 4(yellow), 44(blue), 45(purple), 46(cyan), 47(grey)

# CONDIÇÕES ANINHADAS    
Quando coloca uma coisa dentro da outra. Ou estruturas condicionais dentro de estruturas condicionais.

if carro.esquerda():
    bloco1
elif carro.direita():
    bloco2
elif carro.ré():
    bloco3
else:
    bloco4

Dentro de um programa é possível colocar quantos elif quiser, porém nunca deve existir else sem if, ou apenas elif sem if.

# LAÇO for

# laço c no intervalo(1, 10)
#     passo
# pega

for c in range(1, 10):
    print('Passo')
print('Pega')

# laço c no intervalo(0, 3)
#     Passo
#     pula
# Passo
# pega

for c in range(0, 3):
    print('Passo')
    print('pula')
print('Passo')
print('Pega')


#Contagem Regressiva 
for c in range(6, 0, -1):
    print(c)

#Pular de 2 em 2
for c in range(0, 7, 2):
    print(c)


#Pedir pro usuário digitar o final, ou qualquer coisa dentro do range
n = int(input('Digite um número: '))

for c in range (1, n+1):
    print(c)

####TUPLAS
TUPLAS SÃO IMUTÁVEIS
UMA VEZ QUE O PROGRAMA RODAR, É IMPOSSÍVEL ALTERÁ-LAS, A NÃO SER QUE UTILIZADO O MÉTODO .del()

##### LISTAS
LISTAS SÃO MUTÁVEIS{
    lanche = ['Hamburguer', 'Suco', 'Pizza', 'Pudim']
    lanche[3] = 'Picolé'
    print(lanche)
}
Para adicionar novos elementos a listas, utiliza-se o método .append
Ex. lanche.append('Cookie') #Adiciona ao final da lista, criando uma nova "casa"
 
Também é possível inserir elementos em posições específicas na lista usando o método .insert
Ex. lanche.insert(0,'Cachorro Quente')

Também é possível apagar um elemento de uma lista, usando o comando del
Ex. del lanche[3]

Ou utilizando o método .pop
Ex. lanche.pop(3) #Normalmente é utilizando para eliminar o último elemento, mas é possível passar o indice como parametro para o item q desejar eliminar.
Se utilizar somente lanche.pop() ele irá eliminar o último elemento.

Ou também é possível utilizar o método .remove, que no caso não é utilizado o índice, e sim o item como parametro.
Ex. lanche.remove('Pizza')
Se tentar remover um item que não existe na lista, será apresentado um erro da linguagem, para contornar isso útilizamos:
if 'Pizza' in lanche:
    lanche.remove('Pizza')


Também é possível criar listas a partir do método range
Ex. valores = list(range(4, 11))
então:
valores = [4, 5, 6, 7, 8, 9, 10]
começando em índice 0

Ou então vamos supor que valores = [8, 2, 5, 4, 9, 3, 0] e eu quero organizar os itens, basta utilizar o método .sort
Ex. valores.sort()
valores = [0, 2, 3, 4, 5, 8, 9]
E também é possível ordenar esse valores de forma reversa, utilizando o método sort com parametro reverse
Ex. valores.sort(reverse=True)
valores = [9, 8, 5, 4, 3, 2, 0]

Também é possível saber o tamanho de uma lista utilziando o método len
Ex. len(valores) que retorna 7

EXEMPLOS
num = [2, 5, 9, 1]
num[2] = 3
num.append(7)
num.sort(reverse=True)
num.insert(2, 2)
if 5 in num:
    num.remove(5)
else:
    print('Não encontrei o 4')
print(num)
print(f'Essa lista tem {len(num)} elementos.')

-----------------------
valores = list()
for cont in range(0, 5):
    valores.append(int(input('Digite um valor: ')))

for c, valor in enumerate(valores):
    print(f'Na posição {c} encontrei o valor {valor}!')
print('Fim')
-----------------------

a = [2, 3, 4, 7]
b = a
b[2] = 8
print(a)
print(b)
#Dessa maneira é feita uma ligação entre a lista, por mais que esteja contido em duas variáveis diferentes, a partir do momento que eu altero a lista b por exemplo, eu automáticamente altero a lista a, que é a original.
É possível contornar esse problema fazendo:

a = [2, 3, 4, 7]
b = a[:]  #Nesse exemplo b recebe todos os ITENS de a.
b[2] = 8
print(a)
print(b)

b não tem ligação nenhuma com a, apenas no ínicio que foi criado uma cópia dos valores de a.

TODA STRING eh uma lista

####Parte 2 LISTAS

Em python eh possível criar uma lista dentro de outra, como no exemplo:

dados = ['Pedro', 25]
            0      1

pessoas = list()
pessoas.append(dados[:]) # Nessa linha é criado uma "cópia" da lista dados, onde a lista pessoas fica dessa forma:

pessoas = [['Pedro', 25]]
                   0

e o conteúdo da lista dados que era "dividido" se torna um só dentro de pessoas, sendo possível fazer dessa forma:

pessoas = [['Pedro', 25],['Maria', 19], ['Suellen', 28]]
                0               1               2

Também é possível acessar um item único dentro de uma lista, como por exemplo se fosse necessário exibir apenas o nome Pedro dentro de pessoas, seria feito dessa forma:

print(pessoas[0][0]) #que exibiria Pedro.


EXEMPLOS: 
galera = [['João', 19], ['Ana', 33], ['Joaquim', 13], ['Maria', 45]]
for p in galera:
    print(f'{p[0]} tem {p[1]} anos de idade.) #Que retornaria por exemplo "João tem 19 anos de idade." para cada pessoa em galera.

------------------------------
galera = list()
dado = list()
totmai = totmen = 0
for c in range(0, 3):
    dado.append(str(input('Nome: ')))
    dado.append(int(input('Idade: ')))
    galera.append(dado[:])
    dado.clear()

for p in galera:
    if p[1] >= 21:
        print(f'{p[0]} é maior de idade.')
        totmai += 1
    else:
        print(f'{p[0]} é menor de idade.')
        totmen += 1
print(f'Temos {totmai} maiores e {totmen} menores de idade.')
